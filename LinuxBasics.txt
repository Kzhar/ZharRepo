Historia:
Habrá que viajar nada más y nada menos que al año 1969, cuando Ken Thompson escribió la primera versión de Unix llamada Unics para conocer al antepasado más lejano del Linux actual en cuanto utilización, no a código, como ahora veremos. 
Este sistema operativo coorría en una computadora de 18 bits, la PDP-7 de Dígital, y se diseñó tratando de evitar la complejidad que presentaba su antecesor, Multics.
En 1970, Thompson y Dennis Ritchie portaron Unix a la PDP-11/20. Ritchie diseñó y escribió el primer compilador de C, con la idéa de crear un lenguaje que pudiera ser usado para escribir una versión portátil del sistema. 
Así, en 1973, Ritchie y Thompson reescribieron el kernel de Unix en C, creando un sistema operativo rápido, estable y que podía transportarse y mantenerse con facilidad.
Vemos entonces como C, al igual que su antecesor B, es un lenguaje orientado a la implementación de sistemas operativos y que produce un código altamente eficiente.
En 1974 se otorgaron licencias gratuitas para utilizar Unix con propósitos educativos en Universidades. Y así toda una generación de alumnos y profesores de Ciencias de la computación adquirieron conocimientos de Unix, lo que lo convirtió en el sistema dominante de la época y AT&T empezó a comprender que era un valioso producto comercial. Así, en 1975 los Laboratorios Bell de AT&T publicaron en sistema operativo Unix(V6), y en 1977 John Lions publicó unas notas con el código fuente que usaba en los cursos de sistemas operativos. Pero en 1979 con la publicación de la versión 7, los Laboratorios Bell prohibieron su uso para enseñanza prohibiendo el estudio de su código fuente.
Por ello, en 1984 Andrew S. Tanembaum comenzó a escribir, también en C, un clon de Unix para los IBM-PC con el procesador Intel 8086 con el fin de utilizarlo en su clase en lugar de Unix.
Como su propósito era educativo, tiene dos características básicas: fácil de comprender y fácil de modificar.
Y así en 1987 pudo utilizar Minix, lo que vendría a ser mini-Unix, para enseñar a sus alumnos el diseño de sistemas operativos en la Vrije Universiteit de Ámsterdam. 
Dicho sistema operativo sacrifica eficiencia por modularidad y compresión y soporta multiproceso y multiusuario, dos características básicas de Linux. 
A nivel de usuario es muy parecido a Unix(V7), en cuanto a los comandos y su procesador (SHELL BOURNE) y en las llamadas al sistema,aunque internamente son muy distintos y no utiliza ni una línea de código de AT&T de modo que podía utilizarse para dar una clase o para el estudio individual.
Como todo sistema operativo, MINIX se divide en cuatro partes.
	El administrador del tiempo del procesador que utilizan los programas en ejecución.
	El Administrador de la memoria que utilizan dichos programas.
	El Administrador de entrada/salida (manejador de dispositivos)
	El sistema de archivos o ficheros.
	
Y así, llegamos a 1991 cuando Linux Torvalds comenzó a trabajar en el desarrollo de un kernel basado en el sistema operativo propietario Unix para computadoras con microprocesadores de intel y lo puso a disposición del público a través de un servidor FTP de la universidad finlandesa.
Linus pronto se sumó a la filosofía del proyecto GNU (GNU is Not Unix) de la Free Software Foundation, convirtiendo Linux en un producto de licencia GPL (Licencia Pública General) y consiguiendo que muchos desarrollos ya existentes se sumaran a su kernel convirtiendo Linux en el GNU/Linux que hoy conocemos.
El kernel o núcleo de Linux es el encargado de que software y hardware funcionen de forma adecuada, además de permitir que el usuario se pueda comunicar con el hardware.
Las funciones mas importantes son:


Se suele definir el archivo como el lugar donde escribimos nuestros datos. En otros sistemas operativos se hace distinción entre archivos, directorios, dispositivos y otros componentes del sistema. En GNU/Linux, todo aquello que puede ser manipulado por el sistema es tratado como un archivo.
Pero, si todo es un archivo, ¿el sistema operativo hace hace la distinción entre archivo regular, directorio, dispositivo, procedimiento, etc?. Muy simple: todo archivo tiene lo que se llama "encabezado", que contiene información como: tipo, tamaño, fecha de acceso, modificación y mas. A través de este encabezado, GNU/Linux sabe cuando se trata de un archivo regular, directorio, dispositivo y así sucesivamente.
Debido al gran número de distribuciones de Linux que existen, fueron determinados patrones sobre la estructura de Linux y la forma de manipular los archivos.
Estos patrones constituyen la Linux Standard Base (LSB), basado en los estándares POSIX, SUS etc, y que contiene todas las características que un sistema Linux debe adoptar para mantener un nivel de compatibilidad entre las diferentes distribuciones.
Los sistemas de archivos de Linux y Unix se organizan en una estructura jerárquica, de tipo árbol. El nivel más alto del sistema de archivos es / o directorio raíz (root). Todos los demás archivos y directorios están bajo el directorio raíz.
Por debajo del directorio raíz (/) hay un importante grupo de directorios común a la mayoría de distribuciones de GNU/Linux. A continuación hay una lista de los directorios que aparecen normalmente bajo el directorio raíz (/)
(Directorios de Manjaro:)

bin 			Binarios y otros archivos ejecutables importantes.
boot			Ficheros de configuración del arranque, núcleos y otros ficheros necesarios para el arranque (boot) del equipo.
desktopfs-pkgs.txt
dev			Archivos del dispositivo (device), controlados normalmente por el sistema operativo y el administrador del sistema.
etc			Archivo de configuración del sistema, scripts de arranque etc...
home			Directorios iniciales, personales (home) para los diferentes usuarios.
lib			Librerías del sistema.
lib64			Librerías del sistema de 64 bits.
lost+found		Utilizado por el sistema de archivos para guardar archivos recuperados después de que el sistema de coprobación de archvos haya sido ejecutado.
mnt			Utilizado para montar sistemas de archivos externos. 
opt			Software opcional o de terceros.
proc			Proporciona información acerca de los procesos en ejecución.
root			El directorio inicial de la cuenta del administrador. 
rootfs-pkgs.txt
run			Datos que algunas aplicaciones pueden necesitar almacenar durante su ejecución y que no pueden ir tmp/ porque podrían ser borrados (introducido recientemente 2011)
sbin			
snap			
srv			
sys			
tmp			
usr			
var			Datos variables, los archivos notablemente mas largos.
